<?xml version="1.0"?>
<OWASPZAPReport programName="ZAP" version="2.15.0" generated="Fri, 22 Nov 2024 15:07:28">
	
		<site name="https://petstore.octoperf.com" host="petstore.octoperf.com" port="443" ssl="true">
			<alerts>
				
					<alertitem>
						<pluginid>10202</pluginid>
						<alertRef>10202</alertRef>
						<alert>Absence of Anti-CSRF Tokens</alert>
						<name>Absence of Anti-CSRF Tokens</name>
						<riskcode>2</riskcode>
						<confidence>1</confidence>
						<riskdesc>Medium (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;No Anti-CSRF tokens were found in a HTML submission form.&lt;/p&gt;&lt;p&gt;A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;CSRF attacks are effective in a number of situations, including:&lt;/p&gt;&lt;p&gt;    * The victim has an active session on the target site.&lt;/p&gt;&lt;p&gt;    * The victim is authenticated via HTTP auth on the target site.&lt;/p&gt;&lt;p&gt;    * The victim is on the same local network as the target site.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;CSRF has primarily been used to perform an action against a target site using the victim&apos;s privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Account.action;jsessionid=5C04743772DB526CBAB0651023CF577F?signonForm=</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;form method=&quot;post&quot; action=&quot;/actions/Catalog.action&quot;&gt;</evidence>
									<otherinfo>No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: &quot;__fp&quot; &quot;_sourcePage&quot; &quot;keyword&quot; &quot;searchProducts&quot; ].</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Account.action;jsessionid=5C04743772DB526CBAB0651023CF577F?signonForm=</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;form method=&quot;post&quot; action=&quot;/actions/Account.action&quot;&gt;</evidence>
									<otherinfo>No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 2: &quot;__fp&quot; &quot;_sourcePage&quot; &quot;password&quot; &quot;signon&quot; &quot;stripes-1772355231&quot; ].</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;form method=&quot;post&quot; action=&quot;/actions/Catalog.action&quot;&gt;</evidence>
									<otherinfo>No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: &quot;__fp&quot; &quot;_sourcePage&quot; &quot;keyword&quot; &quot;searchProducts&quot; ].</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;form method=&quot;post&quot; action=&quot;/actions/Catalog.action;jsessionid=5C04743772DB526CBAB0651023CF577F&quot;&gt;</evidence>
									<otherinfo>No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: &quot;__fp&quot; &quot;_sourcePage&quot; &quot;keyword&quot; &quot;searchProducts&quot; ].</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action?viewCategory=&amp;categoryId=FISH</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>&lt;form method=&quot;post&quot; action=&quot;/actions/Catalog.action&quot;&gt;</evidence>
									<otherinfo>No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: &quot;__fp&quot; &quot;_sourcePage&quot; &quot;keyword&quot; &quot;searchProducts&quot; ].</otherinfo>
								</instance>
							
						</instances>
						<count>5</count>
						<solution>&lt;p&gt;Phase: Architecture and Design&lt;/p&gt;&lt;p&gt;Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.&lt;/p&gt;&lt;p&gt;For example, use anti-CSRF packages such as the OWASP CSRFGuard.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Phase: Implementation&lt;/p&gt;&lt;p&gt;Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Phase: Architecture and Design&lt;/p&gt;&lt;p&gt;Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).&lt;/p&gt;&lt;p&gt;Note that this can be bypassed using XSS.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.&lt;/p&gt;&lt;p&gt;Note that this can be bypassed using XSS.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Use the ESAPI Session Management control.&lt;/p&gt;&lt;p&gt;This control includes a component for CSRF.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Do not use the GET method for any request that triggers a state change.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Phase: Implementation&lt;/p&gt;&lt;p&gt;Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: &quot;__fp&quot; &quot;_sourcePage&quot; &quot;keyword&quot; &quot;searchProducts&quot; ].&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html&lt;/p&gt;&lt;p&gt;https://cwe.mitre.org/data/definitions/352.html&lt;/p&gt;</reference>
						<cweid>352</cweid>
						<wascid>9</wascid>
						<sourceid>119</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10038</pluginid>
						<alertRef>10038-1</alertRef>
						<alert>Content Security Policy (CSP) Header Not Set</alert>
						<name>Content Security Policy (CSP) Header Not Set</name>
						<riskcode>2</riskcode>
						<confidence>3</confidence>
						<riskdesc>Medium (High)</riskdesc>
						<confidencedesc>High</confidencedesc>
						<desc>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page &#x2014; covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Account.action;jsessionid=5C04743772DB526CBAB0651023CF577F?signonForm=</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action?viewCategory=&amp;categoryId=FISH</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy&lt;/p&gt;&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html&lt;/p&gt;&lt;p&gt;https://www.w3.org/TR/CSP/&lt;/p&gt;&lt;p&gt;https://w3c.github.io/webappsec-csp/&lt;/p&gt;&lt;p&gt;https://web.dev/articles/csp&lt;/p&gt;&lt;p&gt;https://caniuse.com/#feat=contentsecuritypolicy&lt;/p&gt;&lt;p&gt;https://content-security-policy.com/&lt;/p&gt;</reference>
						<cweid>693</cweid>
						<wascid>15</wascid>
						<sourceid>119</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10020</pluginid>
						<alertRef>10020-1</alertRef>
						<alert>Missing Anti-clickjacking Header</alert>
						<name>Missing Anti-clickjacking Header</name>
						<riskcode>2</riskcode>
						<confidence>2</confidence>
						<riskdesc>Medium (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The response does not include either Content-Security-Policy with &apos;frame-ancestors&apos; directive or X-Frame-Options to protect against &apos;ClickJacking&apos; attacks.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Account.action;jsessionid=5C04743772DB526CBAB0651023CF577F?signonForm=</uri>
									<method>GET</method>
									<param>x-frame-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action</uri>
									<method>GET</method>
									<param>x-frame-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action?viewCategory=&amp;categoryId=FISH</uri>
									<method>GET</method>
									<param>x-frame-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.&lt;/p&gt;&lt;p&gt;If you expect the page to be framed only by pages on your server (e.g. it&apos;s part of a FRAMESET) then you&apos;ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy&apos;s &quot;frame-ancestors&quot; directive.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options&lt;/p&gt;</reference>
						<cweid>1021</cweid>
						<wascid>15</wascid>
						<sourceid>119</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>3</pluginid>
						<alertRef>3-3</alertRef>
						<alert>Referer Exposes Session ID</alert>
						<name>Referer Exposes Session ID</name>
						<riskcode>2</riskcode>
						<confidence>2</confidence>
						<riskdesc>Medium (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;A hyperlink pointing to another host name was found. As session ID URL rewrite is used, it may be disclosed in referer header to external hosts.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Account.action;jsessionid=5C04743772DB526CBAB0651023CF577F?signonForm=</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>octoperf.com</evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;This is a risk if the session ID is sensitive and the hyperlink refers to an external or third party host. For secure content, put session ID in secured session cookie.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://seclists.org/webappsec/2002/q4/111&lt;/p&gt;</reference>
						<cweid>200</cweid>
						<wascid>13</wascid>
						<sourceid>119</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>3</pluginid>
						<alertRef>3-2</alertRef>
						<alert>Session ID in URL Rewrite</alert>
						<name>Session ID in URL Rewrite</name>
						<riskcode>2</riskcode>
						<confidence>3</confidence>
						<riskdesc>Medium (High)</riskdesc>
						<confidencedesc>High</confidencedesc>
						<desc>&lt;p&gt;URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site referer header. In addition, the session ID might be stored in browser history or server logs.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Account.action;jsessionid=5C04743772DB526CBAB0651023CF577F?signonForm=</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>jsessionid=5C04743772DB526CBAB0651023CF577F</evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and URL rewrite.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://seclists.org/webappsec/2002/q4/111&lt;/p&gt;</reference>
						<cweid>200</cweid>
						<wascid>13</wascid>
						<sourceid>119</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10011</pluginid>
						<alertRef>10011</alertRef>
						<alert>Cookie Without Secure Flag</alert>
						<name>Cookie Without Secure Flag</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>Set-Cookie: JSESSIONID</evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html&lt;/p&gt;</reference>
						<cweid>614</cweid>
						<wascid>13</wascid>
						<sourceid>95</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10054</pluginid>
						<alertRef>10054-1</alertRef>
						<alert>Cookie without SameSite Attribute</alert>
						<name>Cookie without SameSite Attribute</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a &apos;cross-site&apos; request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>Set-Cookie: JSESSIONID</evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;Ensure that the SameSite attribute is set to either &apos;lax&apos; or ideally &apos;strict&apos; for all cookies.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site&lt;/p&gt;</reference>
						<cweid>1275</cweid>
						<wascid>13</wascid>
						<sourceid>95</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10096</pluginid>
						<alertRef>10096</alertRef>
						<alert>Timestamp Disclosure - Unix</alert>
						<name>Timestamp Disclosure - Unix</name>
						<riskcode>1</riskcode>
						<confidence>1</confidence>
						<riskdesc>Low (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;A timestamp was disclosed by the application/web server - Unix&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Account.action;jsessionid=5C04743772DB526CBAB0651023CF577F?signonForm=</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>1772355231</evidence>
									<otherinfo>1772355231, which evaluates to: 2026-03-01 14:23:51</otherinfo>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;1772355231, which evaluates to: 2026-03-01 14:23:51&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://cwe.mitre.org/data/definitions/200.html&lt;/p&gt;</reference>
						<cweid>200</cweid>
						<wascid>13</wascid>
						<sourceid>119</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10021</pluginid>
						<alertRef>10021</alertRef>
						<alert>X-Content-Type-Options Header Missing</alert>
						<name>X-Content-Type-Options Header Missing</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The Anti-MIME-Sniffing header X-Content-Type-Options was not set to &apos;nosniff&apos;. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Account.action;jsessionid=5C04743772DB526CBAB0651023CF577F?signonForm=</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action?viewCategory=&amp;categoryId=FISH</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/css/jpetstore.css</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
						</instances>
						<count>4</count>
						<solution>&lt;p&gt;Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to &apos;nosniff&apos; for all web pages.&lt;/p&gt;&lt;p&gt;If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.&lt;/p&gt;&lt;p&gt;At &quot;High&quot; threshold this scan rule will not alert on client or server error responses.&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)&lt;/p&gt;&lt;p&gt;https://owasp.org/www-community/Security_Headers&lt;/p&gt;</reference>
						<cweid>693</cweid>
						<wascid>15</wascid>
						<sourceid>119</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10111</pluginid>
						<alertRef>10111</alertRef>
						<alert>Authentication Request Identified</alert>
						<name>Authentication Request Identified</name>
						<riskcode>0</riskcode>
						<confidence>1</confidence>
						<riskdesc>Informational (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;The given request has been identified as an authentication request. The &apos;Other Info&apos; field contains a set of key=value lines which identify any relevant fields. If the request is in a context which has an Authentication Method set to &quot;Auto-Detect&quot; then this rule will change the authentication to match the request identified.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Account.action</uri>
									<method>POST</method>
									<param>username</param>
									<attack></attack>
									<evidence>password</evidence>
									<otherinfo>userParam=username
userValue=j2ee
passwordParam=password
referer=https://petstore.octoperf.com/actions/Account.action;jsessionid=5C04743772DB526CBAB0651023CF577F?signonForm=</otherinfo>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;This is an informational alert rather than a vulnerability and so there is nothing to fix.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;userParam=username&lt;/p&gt;&lt;p&gt;userValue=j2ee&lt;/p&gt;&lt;p&gt;passwordParam=password&lt;/p&gt;&lt;p&gt;referer=https://petstore.octoperf.com/actions/Account.action;jsessionid=5C04743772DB526CBAB0651023CF577F?signonForm=&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://www.zaproxy.org/docs/desktop/addons/authentication-helper/auth-req-id/&lt;/p&gt;</reference>
						<cweid>-1</cweid>
						<wascid>-1</wascid>
						<sourceid>121</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>90011</pluginid>
						<alertRef>90011</alertRef>
						<alert>Charset Mismatch (Header Versus Meta Content-Type Charset)</alert>
						<name>Charset Mismatch (Header Versus Meta Content-Type Charset)</name>
						<riskcode>0</riskcode>
						<confidence>1</confidence>
						<riskdesc>Informational (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;This check identifies responses where the HTTP Content-Type header declares a charset different from the charset defined by the body of the HTML or XML. When there&apos;s a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable content-sniffing mode to determine the content&apos;s correct character set.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;An attacker could manipulate content on the page to be interpreted in an encoding of their choice. For example, if an attacker can control content at the beginning of the page, they could inject script using UTF-7 encoded text and manipulate some browsers into interpreting that text.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Account.action;jsessionid=5C04743772DB526CBAB0651023CF577F?signonForm=</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>There was a charset mismatch between the HTTP Header and the META content-type encoding declarations: [UTF-8] and [windows-1252] do not match.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>There was a charset mismatch between the HTTP Header and the META content-type encoding declarations: [UTF-8] and [windows-1252] do not match.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action?viewCategory=&amp;categoryId=FISH</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo>There was a charset mismatch between the HTTP Header and the META content-type encoding declarations: [UTF-8] and [windows-1252] do not match.</otherinfo>
								</instance>
							
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;Force UTF-8 for all text content in both the HTTP header and meta tags in HTML or encoding declarations in XML.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;There was a charset mismatch between the HTTP Header and the META content-type encoding declarations: [UTF-8] and [windows-1252] do not match.&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://code.google.com/p/browsersec/wiki/Part2#Character_set_handling_and_detection&lt;/p&gt;</reference>
						<cweid>436</cweid>
						<wascid>15</wascid>
						<sourceid>119</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10027</pluginid>
						<alertRef>10027</alertRef>
						<alert>Information Disclosure - Suspicious Comments</alert>
						<name>Information Disclosure - Suspicious Comments</name>
						<riskcode>0</riskcode>
						<confidence>1</confidence>
						<riskdesc>Informational (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Account.action;jsessionid=5C04743772DB526CBAB0651023CF577F?signonForm=</uri>
									<method>GET</method>
									<param></param>
									<attack></attack>
									<evidence>select</evidence>
									<otherinfo>The following pattern was used: \bSELECT\b and was detected in the element starting with: &quot;&lt;script type=&quot;text/javascript&quot;&gt;setTimeout(function(){try{var z=document.getElementById(&apos;stripes-1772355231&apos;);z.focus();z.select(&quot;, see evidence field for the suspicious comment/snippet.</otherinfo>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;The following pattern was used: \bSELECT\b and was detected in the element starting with: &quot;&lt;script type=&quot;text/javascript&quot;&gt;setTimeout(function(){try{var z=document.getElementById(&apos;stripes-1772355231&apos;);z.focus();z.select(&quot;, see evidence field for the suspicious comment/snippet.&lt;/p&gt;</otherinfo>
						<reference></reference>
						<cweid>200</cweid>
						<wascid>13</wascid>
						<sourceid>119</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10015</pluginid>
						<alertRef>10015</alertRef>
						<alert>Re-examine Cache-control Directives</alert>
						<name>Re-examine Cache-control Directives</name>
						<riskcode>0</riskcode>
						<confidence>1</confidence>
						<riskdesc>Informational (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Account.action;jsessionid=5C04743772DB526CBAB0651023CF577F?signonForm=</uri>
									<method>GET</method>
									<param>cache-control</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action</uri>
									<method>GET</method>
									<param>cache-control</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action?viewCategory=&amp;categoryId=FISH</uri>
									<method>GET</method>
									<param>cache-control</param>
									<attack></attack>
									<evidence></evidence>
									<otherinfo></otherinfo>
								</instance>
							
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;For secure content, ensure the cache-control HTTP header is set with &quot;no-cache, no-store, must-revalidate&quot;. If an asset should be cached consider setting the directives &quot;public, max-age, immutable&quot;.&lt;/p&gt;</solution>
						<otherinfo></otherinfo>
						<reference>&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching&lt;/p&gt;&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control&lt;/p&gt;&lt;p&gt;https://grayduck.mn/2021/09/13/cache-control-recommendations/&lt;/p&gt;</reference>
						<cweid>525</cweid>
						<wascid>13</wascid>
						<sourceid>119</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10112</pluginid>
						<alertRef>10112</alertRef>
						<alert>Session Management Response Identified</alert>
						<name>Session Management Response Identified</name>
						<riskcode>0</riskcode>
						<confidence>2</confidence>
						<riskdesc>Informational (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The given response has been identified as containing a session management token. The &apos;Other Info&apos; field contains a set of header tokens that can be used in the Header Based Session Management Method. If the request is in a context which has a Session Management Method set to &quot;Auto-Detect&quot; then this rule will change the session management to use the tokens identified.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>5C04743772DB526CBAB0651023CF577F</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>6E994754AF85D30A75DE3917F7E559C6</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>D9F3E40E767CC38FDF25D26C263E722F</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Account.action;jsessionid=5C04743772DB526CBAB0651023CF577F?signonForm=</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>5C04743772DB526CBAB0651023CF577F</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Account.action?signoff=</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>5C04743772DB526CBAB0651023CF577F</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Catalog.action?viewCategory=&amp;categoryId=FISH</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>5C04743772DB526CBAB0651023CF577F</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/images/banner_dogs.gif</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>5C04743772DB526CBAB0651023CF577F</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/images/banner_dogs.gif</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>C00D4EC782AD2FBDD3356A079B0A4535</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://petstore.octoperf.com/actions/Account.action</uri>
									<method>POST</method>
									<param>JSESSIONID</param>
									<attack></attack>
									<evidence>5C04743772DB526CBAB0651023CF577F</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
						</instances>
						<count>9</count>
						<solution>&lt;p&gt;This is an informational alert rather than a vulnerability and so there is nothing to fix.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;&lt;/p&gt;&lt;p&gt;cookie:JSESSIONID&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://www.zaproxy.org/docs/desktop/addons/authentication-helper/session-mgmt-id&lt;/p&gt;</reference>
						<cweid>-1</cweid>
						<wascid>-1</wascid>
						<sourceid>95</sourceid>
					</alertitem>
				
			</alerts>
		</site>
	
</OWASPZAPReport>